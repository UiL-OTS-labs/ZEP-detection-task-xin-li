/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Same-Different Auditory Discrimination (AX)
See readme.txt for more information.


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2012-01-30 TV   Created.
2016-05-09 CvR   Adjusted (C.P.A.vanrun@uu.nl)

\******************************************************************************/

requires 1.14;

import defs;
import shuffle;
import output;

Block task_practice
{
    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                PRACTICE_DETECTION_INSTRUCTION,
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block practice
    {
        TestItem        item;   // current item
        TestItem[..]    missed_items;
        int consecutive_correct;

        on_event:entry()
        {
            consecutive_correct = 0;

            if (shuffle_test_items(prac_items) != OK) terminate;
            setup();
        }

        void setup()
        {
            num_cycles = prac_items.size;

            // Prepare test page: progress bar, feedback and prompt enabled.
            test_page.setup(UNDER_LIMIT_OF_CONSECUTIVE_CORRECTS, true, true);
        }

        on_event:exit()
        {
            test_page.cleanup();
            prac_output_save();
        }


        Trial trial
        {
            TestItem item;

            on_event:entry()
            {
                if (practice.cycle % prac_items.size == 0)
                    if (shuffle_test_items(prac_items) != OK) terminate;

                item = prac_items[practice.cycle % prac_items.size];

                test_page.action(this, item, reference_time, consecutive_correct);
            }

            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = practice.cycle + 1;
                output.id = item.id;
                output.block = -1;
                output.sndfn1 = item.sndfn1;
                output.sndfn2 = item.sndfn2;
                output.value = test_page.response.value;
                output.correctness = test_page.response.correctness;
                output.rt = test_page.response.rt;

                prac_output_append(output);

                if(test_page.response.correctness > 0)
                    practice.consecutive_correct++;
                else
                    practice.consecutive_correct = 0;

                if(consecutive_correct < UNDER_LIMIT_OF_CONSECUTIVE_CORRECTS)
                    practice.num_cycles = practice.num_cycles+1;
                if( consecutive_correct>= UNDER_LIMIT_OF_CONSECUTIVE_CORRECTS)
                    practice.num_cycles = 0; // Just continue.
            }
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                END_OF_PRACTICE_DETECTION_INSTRUCTION,
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task_practice.enter(caller);
}
